#!/usr/bin/ruby
require 'httparty'
require 'docopt'
require 'yaml'

class NewWalletBackend
  include HTTParty
  attr_accessor :wid, :port
  
  def initialize(id = "", port = CONFIG[:port_new])
    @wid = id
    @port = port
    @api = "http://localhost:#{@port}/v2"
  end
  
  def byron_wallets
    self.class.get("#{@api}/byron-wallets")
  end
  
  def byron_wallets_ids
    byron_wallets.map { |w| w['id'] }
  end
  
  def byron_wallet (id = @wid)
    self.class.get("#{@api}/byron-wallets/#{id}")
  end
  
  def byron_delete (id = @wid)
    self.class.delete("#{@api}/byron-wallets/#{id}")
  end
  
  def byron_transactions (id = @wid, q = "")
    self.class.get("#{@api}/byron-wallets/#{id}/transactions#{q}")
  end

  def wallets
    self.class.get("#{@api}/wallets")
  end
  
  def wallets_ids
    wallets.map { |w| w['id'] }
  end
  
  def wallet (id = @wid)
    self.class.get("#{@api}/wallets/#{id}")
  end
  
  def wallet_balance (id = @wid)
    wallet(id)['balance']['available']['quantity']
  end

  def addresses (id = @wid, q = "")
    self.class.get("#{@api}/wallets/#{id}/addresses#{q}")
  end
  
  def addresses_used (id = @wid)
    addresses(id, "?state=used")
  end
  
  def addresses_unused (id = @wid)
    addresses(id, "?state=unused")
  end
  
  def delete (id = @wid)
    self.class.delete("#{@api}/wallets/#{id}")
  end
  
  def transactions (id = @wid, q = "")
    self.class.get("#{@api}/wallets/#{id}/transactions#{q}")
  end

  def create_transaction(amount, address, passphrase, id = @wid)
    self.class.post("#{@api}/wallets/#{id}/transactions", 
    :body => { :payments => 
                   [ { :address => address, 
                       :amount => { :quantity => amount, 
                                    :unit => 'lovelace' }
                     }
                   ], 
               :passphrase => passphrase
             }.to_json,
    :headers => { 'Content-Type' => 'application/json' } )
  end
end

# class OldWalletBackend
#   include HTTParty
#   attr_accessor :wid, :account_id, :port
# 
#   def initialize(id = "", port = CONFIG[:port_old])
#     @wid = id
#     @account_id = 2147483648
#     @port = port
#     @api = "https://localhost:#{port}/api/v1"
#   end
# 
#   def wallets
#     self.class.get("#{@api}/wallets", verify: false)
#   end
# 
#   def wallets_ids
#     wallets.map { |w| w['data']['id'] }
#   end
# 
#   def wallet (id = @wid)
#     self.class.get("#{@api}/wallets/#{id}", verify: false)
#   end
# 
#   def wallet_balance (id = @wid)
#     wallet(id)['data']['balance']
#   end
# 
#   def address_create (id = @wid, pass = "")
#     self.class.post("#{@api}/addresses", 
#       :body => { :accountIndex => @account_id,
#                  :walletId => id,
#                  :spendinPassword => pass  }.to_json, 
#       :headers => { 'Content-Type' => 'application/json' }, 
#       :verify => false )['data']['id']
#   end
# 
#   def create_transaction(amount, address, pass = "", id = @wid)
# 
#     self.class.post("#{@api}/transactions", 
#       :body => { :groupingPolicy => "OptimizeForHighThroughput",
#                  :destinations => [ { :amount => amount, :address => address } ],
#                  :source => { :accountIndex => @account_id, :walletId => id },
#                  :spendinPassword => pass  }.to_json, 
#       :headers => { 'Content-Type' => 'application/json' }, 
#       :verify => false )
#   end
# 
# end

class Jormungandr
  include HTTParty
  attr_accessor :port
  
  def initialize(port = CONFIG[:port_jorm])
    @port = port
    @api = "http://localhost:#{port}/api/v0"
  end
  
  def get_node_stats
    self.class.get("#{@api}/node/stats")
  end
  
  def get_settings
    self.class.get("#{@api}/settings")
  end
  
  def get_stake
    self.class.get("#{@api}/stake")
  end
  
  def get_stake_pools
    self.class.get("#{@api}/stake_pools")
  end
  
  def get_message_logs
    self.class.get("#{@api}/fragment/logs")
  end
  
  def get_leaders_logs
    self.class.get("#{@api}/leaders/logs")
  end
end

def from_new_2_new (new_id1, new_id2, same_addr, max_tx_spend = CONFIG[:max_tx_spend].to_f)
  w1 = NewWalletBackend.new new_id1
  w2 = NewWalletBackend.new new_id2

  amt = [*1..w1.wallet_balance*max_tx_spend].sample 
  puts "Amt = #{amt}"
  a2 = w2.addresses_unused.sample['id'] unless same_addr
  a2 = w2.addresses[0]['id'] if same_addr
  puts "Addr = #{a2}"
  tx2_id = w1.create_transaction(amt, a2, CONFIG[:pass_new])
  puts "From new 2 new (#{w1.wid} -> #{w2.wid} ) "
  pp tx2_id
  puts "-------------"
end

def new_and_new (new_id1, new_id2, same_args)
  while 1 do
    from_new_2_new new_id1, new_id2, same_args
    from_new_2_new new_id2, new_id1, same_args
    sleep_me CONFIG[:max_sleep] unless CONFIG[:max_sleep] == 0
  end
end

def sleep_me max_s
  s = [*1..max_s].sample
  puts "sleep #{s}"
  sleep s
end

def display_stats_wallet (wal_id, type = :shelley, moreStats = false)
  w = NewWalletBackend.new wal_id
  wal = w.wallet if type == :shelley
  wal = w.byron_wallet if type == :byron
  id = wal['id']
  status = wal['state']['status']

  puts wal['name']
  puts " ID: #{id}"
  puts " Status: #{status}"
  puts "    Progress: #{wal['state']['progress']['quantity']}%" if status == "syncing"
  puts " Tip:"
  puts "    Height: #{wal['tip']['height']['quantity']} block"
  puts "    Epoch: #{wal['tip']['epoch_number']}"
  puts "    Slot: #{wal['tip']['slot_number']}"
  
  total = wal['balance']['total']['quantity']
  available = wal['balance']['available']['quantity']
  puts " Balance total: " + total.to_s
  puts " Balance available: " + available.to_s
  puts " Balance total - available: #{total.to_i - available.to_i}" 
  
  if moreStats
    if (type == :shelley)
      # addresses available only for shelley
      addresses = w.addresses
      used = addresses.select{ |a| a['state'] == "used" }
      unused = addresses.select{ |a| a['state'] == "unused" }
      puts " Addresses: " + addresses.size.to_s
      puts "    Used: " + used.size.to_s
      puts "    Unused: " + unused.size.to_s
    end
    txs = w.transactions(id) if type == :shelley
    txs = w.byron_transactions(id) if type == :byron          
    puts " Transactions: " + txs.size.to_s
    puts "  Status:"
    tx_pending = txs.select{ |t| t['status'] == "pending" }
    puts "   Pending: " + tx_pending.size.to_s
    puts "   Sum of pending amounts: #{tx_pending.map{|tx| tx['amount']['quantity'].to_i}.sum}"
      # tx_pending.each do |tx|
      #    puts "    ID: #{tx['id']}"
      #    puts "      Direction: #{tx['direction']}"
      #    puts "      Pending since: "
      #    puts "         Epoch: #{tx['pending_since']['block']['epoch_number']} - Slot: #{tx['pending_since']['block']['slot_number']}"
      #    puts "         Block: #{tx['pending_since']['block']['height']['quantity']}"
      #    puts "      Amount: #{tx['amount']['quantity']}"
      #    puts "      Inputs:"
      #    puts "        Sum of inputs: #{tx['inputs'].map {|i| i['amount']['quantity'].to_i}.sum}"
      #    tx['inputs'].each do |input|
      #      puts "          - #{input['amount']['quantity']}"
      #    end
      # end
    puts "   InLedger: " + txs.select{ |t| t['status'] == "in_ledger" }.size.to_s
    puts "  Direction:"
    puts "   Incoming: " + txs.select{ |t| t['direction'] == "incoming" }.size.to_s
    puts "   Outgoing: " + txs.select{ |t| t['direction'] == "outgoing" }.size.to_s
  end  
  puts
end
            
doc = <<DOCOPT
Wallet test aid

Usage:
  #{__FILE__} [--conf=<co>] stats (new|old) [full] [<wid>]
  #{__FILE__} [--conf=<co>] stats jorm [stake] [logs]
  #{__FILE__} [--conf=<co>] del-all (new|old)
  #{__FILE__} [--conf=<co>] test [same_addr] <wid1> <wid2> 
  #{__FILE__} [--conf=<co>] tx <wid1> <wid2> 
  #{__FILE__} config read [--conf=<co>]
  #{__FILE__} config gen [--conf=<co>] [--max-sleep=<sec>] [--max-tx-spend=<t>] [--port-old=<port>] [--port-new=<port>] [--pass-new=<pass>] [--port-jorm=<port>] 
  #{__FILE__} -h | --help

Args:
  stats (new|old) Stats for new wallet or old wallet
  stats jorm            Stats for Jormungandr node
  test [same_addr]      Run txs back and forth between 2 wallets <wid1> <wid2>
                        if same_addr provided uses the same address all the time, 
                        otherwise always picks some unused one
  tx                    Run 1 tx between 2 wallets <wid1> <wid2>
  del-all               Delete all new wallets
  config                Read or gen config file
  
Options:
  -h --help           Show this screen. 
  --conf=<co>         Path to config file [default: ./config.yml]
  --max-sleep=<sec>   Max sleep between two txs when testing [default: 5]
  --max-tx-spend=<t>  Max tx spend between two txs when testing [default: 0.00001]
  --port-old=<port>   Old wallet's server port [default: 46083]
  --port-new=<port>   New wallet's server port [default: 8090]
  --pass-new=<pass>   Password for new wallet [default: Secure Passphrase]
  --port-jorm=<port>  Jormungandr node api port [default: 8080]
             
DOCOPT

begin
  require 'pp'
  args = Docopt::docopt(doc)
  # pp args
  @config_file = args['--conf']
  
  default_config = {
      :port_old => args['--port-old'],
      :port_new => args['--port-new'],
      :pass_new => args['--pass-new'],      
      :port_jorm => args['--port-jorm'],
      :max_tx_spend => args['--max-tx-spend'].to_f, 
      :max_sleep => args['--max-sleep'].to_i
  }
  if File.exists? @config_file
    CONFIG = YAML.load_file @config_file
  else
    puts "Config file #{@config_file} does not exist. Using default values."
    CONFIG = default_config
  end
  
  if args['del-all']
    w = NewWalletBackend.new
    w.wallets_ids.map {|id| w.delete(id)} if args['new']
    w.byron_wallets_ids.map {|id| w.byron_delete(id)} if args['old']
    puts "All wallets deleted."   
  end
  
  if args['stats']
    if args['jorm']
      jorm = Jormungandr.new
      puts "Jormungandr node stats:"
      puts "---"
      jorm.get_node_stats.each do |k,v|
        puts "#{k} = #{v}"
      end
      puts 
      puts "Settings:"
      puts "---"
      jorm.get_settings.each do |k,v|
        if k == "fees"
          puts "fees: "
          v.each do |kf, vf|
            puts "  #{kf} = #{vf}"
          end
        else
          puts "#{k} = #{v}"
        end
      end
      
      if args['stake']
        puts
        puts "Stake: "
        puts "---"  
        pp jorm.get_stake      
      end
      
      if args['logs']  
        puts
        puts "Message logs: "
        puts "---" 
        pp jorm.get_message_logs
        puts
        puts "Leader logs: "
        puts "---" 
        pp jorm.get_leaders_logs
      end
      
    end
    
    if args['new']
      if args['<wid>']
        # for single wallet
        display_stats_wallet args['<wid>'], :shelley, args['full']
      else
        #  for all wallets
        w = NewWalletBackend.new
        w.wallets.each do |wal|
          display_stats_wallet wal['id'], :shelley, args['full']
        end
      end   
    end
    
    if args['old']
      if args['<wid>']
        # for single wallet
        display_stats_wallet args['<wid>'], :byron, args['full']
      else
        #  for all wallets
        w = NewWalletBackend.new
        w.byron_wallets.each do |wal|
          display_stats_wallet wal['id'], :byron, args['full']
        end
      end   
    end
        
  end
  
  if args['test']
    wid1 = args['<wid1>']
    wid2 = args['<wid2>']
    new_and_new wid1, wid2, args['same_addr'] 
  end
  
  if args['tx']
    wid1 = args['<wid1>']
    wid2 = args['<wid2>']
    from_new_2_new wid1, wid2, args['same_addr']
  end
  
  if args['config']
    if args['read']
      if File.exists? @config_file
        c = YAML.load_file(@config_file)
        c.each do |k,v|
          puts "#{k} => #{v}"
        end
      else
        puts "#{@config_file} does not exist. Try 'config gen'."
      end
    end
    
    if args['gen']
      isOnDisk = File.exists? @config_file
      puts "Regenerating #{@config_file}." if isOnDisk
    
      f = File.new(@config_file, "w")
      f.write(default_config.to_yaml)
      f.close
      puts "#{@config_file} re-generated." if isOnDisk
      puts "#{@config_file} generated." unless isOnDisk
    end
  end
 
rescue Docopt::Exit => e
  puts e.message
end